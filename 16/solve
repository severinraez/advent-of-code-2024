#!/usr/bin/env ruby

require 'sorted_set'

Vector = Data.define(:x, :y) do
  def +(other) = self.class.new(x: x + other.x, y: y + other.y)
  def -(other) = self.class.new(x: x - other.x, y: y - other.y)
  def length = Math.sqrt((x**2) + (y**2))
  def neighbours = [with(x: x - 1), with(y: y - 1), with(x: x + 1), with(y: y + 1)]
  def unit = self.class.new(x: x == 0 ? 0 : x.abs / x, y: y == 0 ? y : y.abs / y)
end

class Heading
  class << self
    def left = new(LEFT)
    def right = new(RIGHT)
    def up =  new(UP)
    def down = new(DOWN)
    def from_points(from, to) = new((to - from).unit)
    def all = [left, right, up, down]
  end

  def initialize(direction)
    @direction = direction
  end

  def eql?(other) = direction == other.direction
  def hash = direction.hash
  def <=>(other) = direction <=> other.direction

  def turn_count(heading)
    other_direction = heading.direction
    return 0 if other_direction == direction
    return 2 if other_direction.x == -direction.x || other_direction.y == -direction.y

    1
  end

  attr_reader :direction

  LEFT = Vector.new(x: -1, y: 0)
  RIGHT = Vector.new(x: 1, y: 0)
  UP = Vector.new(x: 0, y: -1)
  DOWN = Vector.new(x: 0, y: 1)
  private_constant :LEFT, :RIGHT, :UP, :DOWN
end

class MazeMap
  def initialize(lines)
    @positions = parse(lines)
    @height = positions.length
    @width = positions.first.length
  end

  def at(vector) = positions[vector.y][vector.x]

  attr_reader :reindeer_start, :reindeer_target

  private

  attr_reader :positions, :height, :width

  def parse(lines)
    lines.each_with_index.map do |line, y|
      line.each_with_index.map do |char, x|
        case char
        when '.'
          :empty
        when '#'
          :wall
        when 'S'
          @reindeer_start = Vector.new(x, y)
          :empty
        when 'E'
          @reindeer_target = Vector.new(x, y)
          :empty
        end
      end
    end
  end
end

Node = Data.define(:position, :edges) do
  class << self
    def make(position:) = new(position:, edges: [])
  end

  def connect(other, weight)
    edge = Edge.new([self, other], weight)
    edges << edge
    other.edges << edge
  end

  def each_connected_node(&) = edges.map { yield((_1.nodes - [self]).first, _1.weight) }
end

Edge = Data.define(:nodes, :weight)

class MazeGraph
  def initialize(map)
    @map = map
    @nodes = {}
    parse
  end

  def node(position) = @nodes.fetch(position)

  private

  attr_reader :map, :nodes

  def parse = flood(make_node(map.reindeer_start))

  def flood(node)
    Heading.all.each do |heading|
      flood_direction(
        node,
        heading,
        node.position + heading.direction
      )
    end
  end

  def flood_direction(node, heading, position)
    return if map.at(position) == :wall && node.position + heading.direction == position

    free_neighbours =
      position
      .neighbours
      .select { map.at(_1) == :empty }

    ahead = position + heading.direction
    free_ahead = free_neighbours.include?(ahead)
    if free_neighbours.length > 2 || !free_ahead
      stop_after = has_node?(position)
      new_node = make_node(position)
      cost = (position - node.position).length
      new_node.connect(node, cost)
      flood(new_node) unless stop_after
    elsif free_ahead
      flood_direction(node, heading, ahead)
    end
  end

  def has_node?(position) = nodes.key?(position)
  def make_node(position) = nodes[position] ||= Node.make(position:)
end

class Solution
  def initialize(graph, start_node, start_heading, target_node)
    @graph = graph
    @target_node = target_node
    @inside_positions = Set.new
    @fringe = SortedSet.new(
      [FringeEntry.new(node: start_node, heading: start_heading, cost: 0)]
    )
  end

  def search
    best = []
    while best.empty?
      candidates = pop_candidates(fringe.first.cost)

      candidates.each do |entry|
        entry.node.each_connected_node do |node, advance_cost|
          next if inside_positions.include?(node)

          heading = Heading.from_points(entry.node.position, node.position)
          turn_cost = entry.heading.turn_count(heading) * 1_000
          cost = (entry.cost + turn_cost + advance_cost).to_i

          best << cost if node == target_node

          fringe << FringeEntry.new(node:, heading:, cost:)
        end
      end
      candidates.each do |candidate|
        drop_position_from_fringe(candidate.node.position)
        inside_positions.add(candidate.node.position)
      end
    end
    best
  end

  private

  attr_reader :graph, :target_node, :inside_positions, :fringe

  FringeEntry = Data.define(:node, :heading, :cost) do
    def <=>(other) = comparable <=> other.comparable

    protected

    def comparable = [cost, node.position.hash, heading.direction.hash]
  end

  def drop_position_from_fringe(position) = fringe.delete_if { _1.node.position == position }

  def pop_candidates(cost)
    result = []
    loop do
      candidate = fringe.first
      return result if candidate.nil? || candidate.cost != cost

      result << candidate
      fringe.delete(candidate)
    end
  end
end

map = MazeMap.new(ARGF.readlines(chomp: true).map(&:chars))
graph = MazeGraph.new(map)
# pp graph.node(map.reindeer_start).edges.map { _1.nodes.map(&:position) }
# pp graph.node(map.reindeer_target).edges.map { _1.nodes.map(&:position) }

puts Solution.new(
  graph,
  graph.node(map.reindeer_start),
  Heading.right,
  graph.node(map.reindeer_target)
).search.first
