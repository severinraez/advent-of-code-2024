#!/usr/bin/env ruby

require 'sorted_set'

Vector = Data.define(:x, :y) do
  def +(other) = self.class.new(x: x + other.x, y: y + other.y)
  def -(other) = self.class.new(x: x - other.x, y: y - other.y)
  def length = Math.sqrt((x**2) + (y**2))
  def neighbours = [with(x: x - 1), with(y: y - 1), with(x: x + 1), with(y: y + 1)]
  def unit = self.class.new(x: x == 0 ? 0 : x.abs / x, y: y == 0 ? y : y.abs / y)
  def to_s = "#{x}/#{y}"
end

class Heading
  class << self
    def left = new(LEFT)
    def right = new(RIGHT)
    def up =  new(UP)
    def down = new(DOWN)
    def from_points(from, to) = new((to - from).unit)
    def all = [left, right, up, down]
  end

  def initialize(direction)
    @direction = direction
  end

  def eql?(other) = direction == other.direction
  def hash = direction.hash
  def <=>(other) = direction <=> other.direction

  def turn_count(heading)
    other_direction = heading.direction
    return 0 if other_direction == direction
    return 2 if other_direction.x == -direction.x || other_direction.y == -direction.y

    1
  end

  attr_reader :direction

  LEFT = Vector.new(x: -1, y: 0)
  RIGHT = Vector.new(x: 1, y: 0)
  UP = Vector.new(x: 0, y: -1)
  DOWN = Vector.new(x: 0, y: 1)
  private_constant :LEFT, :RIGHT, :UP, :DOWN
end

class MazeMap
  def initialize(lines)
    @positions = parse(lines)
    @height = positions.length
    @width = positions.first.length
  end

  def at(vector) = positions[vector.y][vector.x]

  attr_reader :reindeer_start, :reindeer_target, :height, :width

  private

  attr_reader :positions

  def parse(lines)
    lines.each_with_index.map do |line, y|
      line.each_with_index.map do |char, x|
        case char
        when '.'
          :empty
        when '#'
          :wall
        when 'S'
          @reindeer_start = Vector.new(x, y)
          :empty
        when 'E'
          @reindeer_target = Vector.new(x, y)
          :empty
        end
      end
    end
  end
end

Node = Data.define(:position, :edges) do
  class << self
    def make(position:) = new(position:, edges: [])
  end

  def connect(other, weight)
    return if connected?(other)

    edge = Edge.new([self, other], weight)
    edges << edge
    other.edges << edge
  end

  def connected?(other) = edges.any? { _1.nodes.include?(other) }
  def each_connected_node(&) = connected_nodes.each { yield(*_1) }
  def connected_nodes = edges.map { [(_1.nodes - [self]).first, _1.weight] }
  def inspect = "Node(#{position} => #{connected_nodes.map { |n, c| n.position }.map(&:to_s).join(', ')})"
end

Edge = Data.define(:nodes, :weight)

class MazeGraph
  def initialize(map)
    @map = map
    @nodes = {}
    parse
  end

  def node(position) = @nodes.fetch(position)

  private

  attr_reader :map, :nodes

  def parse = flood(make_node(map.reindeer_start))

  def flood(node)
    Heading.all.each do |heading|
      flood_direction(
        node,
        heading,
        node.position + heading.direction
      )
    end
  end

  def flood_direction(node, heading, position)
    return if map.at(position) == :wall && node.position + heading.direction == position

    free_neighbours =
      position
      .neighbours
      .select { map.at(_1) == :empty }

    ahead = position + heading.direction
    free_ahead = free_neighbours.include?(ahead)
    if free_neighbours.length > 2 || !free_ahead
      stop_after = has_node?(position)
      new_node = make_node(position)
      cost = (position - node.position).length
      new_node.connect(node, cost)
      flood(new_node) unless stop_after
    elsif free_ahead
      flood_direction(node, heading, ahead)
    end
  end

  def has_node?(position) = nodes.key?(position)
  def make_node(position) = nodes[position] ||= Node.make(position:)
end

class Solution
  def initialize(graph, start_node, start_heading, target_node)
    @graph = graph
    @target_node = target_node
    @inside = Set.new
    @fringe = SortedSet.new(
      [FringeEntry.new(node: start_node, heading: start_heading, cost: 0, positions: [start_node.position])]
    )
    mark_processed(@fringe.to_a)
  end

  def search
    best_paths = []
    best_cost = nil
    loop do
      return best_paths if fringe.empty?

      best_fringe_cost = fringe.first.cost
      return best_paths if !best_cost.nil? && best_fringe_cost > best_cost

      fringe_entries = pop_fringe(best_fringe_cost)
      new_fringe_entries = []

      fringe_entries.each do |fringe_entry|
        fringe_entry.node.each_connected_node do |new_node, advance_cost|
          new_heading = Heading.from_points(fringe_entry.node.position, new_node.position)

          next if inside?(new_node, new_heading)

          turn_cost = fringe_entry.heading.turn_count(new_heading) * 1_000
          cost = (fringe_entry.cost + turn_cost + advance_cost).to_i
          positions = [*fringe_entry.positions, new_node.position]

          if new_node == target_node
            if best_cost.nil? || best_cost == cost
              best_cost ||= cost
              best_paths << positions
            end
          else
            new_fringe_entries << FringeEntry.new(node: new_node, heading: new_heading, cost:, positions:)
          end
        end
      end

      mark_processed(new_fringe_entries)
      new_fringe_entries.each { fringe << _1 }

      puts 'Fringe:'
      puts fringe.map(&:inspect).join("\n")
    end
    best_paths
  end

  private

  attr_reader :graph, :target_node, :inside, :fringe

  FringeEntry = Data.define(:node, :heading, :cost, :positions) do
    def <=>(other) = comparable <=> other.comparable

    def inspect = "FringeEntry(P #{node.position}, H #{heading.direction}, C #{cost}, H #{positions.map(&:to_s).join(', ')})"

    protected

    def comparable = [cost, node.position.hash, heading.direction.hash]
  end

  def inside?(node, heading) = inside.include?([node.position, heading.direction])

  def mark_processed(fringe_entries)
    fringe_entries.each do |entry|
      inside.add([entry.node.position, entry.heading.direction])
    end
  end

  def pop_fringe(cost)
    result = []
    loop do
      candidate = fringe.first
      return result if candidate.nil? || candidate.cost != cost

      result << candidate
      fringe.delete(candidate)
    end
  end
end

map = MazeMap.new(ARGF.readlines(chomp: true).map(&:chars))
graph = MazeGraph.new(map)

def fill_gaps(from, to)
  direction = Heading.from_points(from, to).direction
  result = []
  pointer = from
  while pointer != to
    result << pointer
    pointer += direction
  end
  [*result, to]
end

def print_path(map, positions, markers)
  markers.each do |position, char|
    puts "#{position} => #{char}"
  end

  (0...map.height).each do |y|
    (0...map.width).each do |x|
      position = Vector.new(x, y)
      print case map.at(position)
            when :empty
              if markers.key?(position)
                markers[position]
              elsif positions.include?(position)
                'O'
              else
                '.'
              end

            when :wall
              '#'
            end
    end
    print "\n"
  end
end

paths = Solution.new(
  graph,
  graph.node(map.reindeer_start),
  Heading.right,
  graph.node(map.reindeer_target)
).search

pp paths
  .map { _1.each_cons(2).flat_map { |from, to| fill_gaps(from, to) } }
  .each { print_path(map, _1, { Vector.new(1, 9) => 'X', Vector.new(5, 7) => 'Y', Vector.new(5, 9q) => 'Z' }) }
  .flatten
  .uniq
  .length
