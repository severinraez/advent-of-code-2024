#!/usr/bin/env ruby

require 'sorted_set'

Vector = Data.define(:x, :y) do
  def +(other) = self.class.new(x: x + other.x, y: y + other.y)
  def -(other) = self.class.new(x: x - other.x, y: y - other.y)
  def opposite = self.class.new(x: -x, y: -y)
  def length = Math.sqrt((x**2) + (y**2))
  def neighbours = [with(x: x - 1), with(y: y - 1), with(x: x + 1), with(y: y + 1)]
  def unit = self.class.new(x: x == 0 ? 0 : x.abs / x, y: y == 0 ? y : y.abs / y)
  def to_s = "#{x}/#{y}"
end

class Heading
  class << self
    def left = new(LEFT)
    def right = new(RIGHT)
    def up =  new(UP)
    def down = new(DOWN)
    def from_points(from, to) = new((to - from).unit)
    def all = [left, right, up, down]
  end

  def initialize(direction)
    @direction = direction
  end

  def opposite = self.class.new(@direction.opposite)
  def eql?(other) = direction == other.direction
  def hash = direction.hash
  def <=>(other) = direction <=> other.direction
  def to_s = "H #{direction}"

  def turn_count(heading)
    other_direction = heading.direction
    return 0 if other_direction == direction
    return 2 if other_direction.x == -direction.x || other_direction.y == -direction.y

    1
  end

  attr_reader :direction

  LEFT = Vector.new(x: -1, y: 0)
  RIGHT = Vector.new(x: 1, y: 0)
  UP = Vector.new(x: 0, y: -1)
  DOWN = Vector.new(x: 0, y: 1)
  private_constant :LEFT, :RIGHT, :UP, :DOWN
end

class MazeMap
  def initialize(lines)
    @positions = parse(lines)
    @height = positions.length
    @width = positions.first.length
  end

  def at(vector) = positions[vector.y][vector.x]

  attr_reader :reindeer_start, :reindeer_target, :height, :width

  private

  attr_reader :positions

  def parse(lines)
    lines.each_with_index.map do |line, y|
      line.each_with_index.map do |char, x|
        case char
        when '.'
          :empty
        when '#'
          :wall
        when 'S'
          @reindeer_start = Vector.new(x, y)
          :empty
        when 'E'
          @reindeer_target = Vector.new(x, y)
          :empty
        end
      end
    end
  end
end

Node = Data.define(:position, :edges, :id) do
  class << self
    def make(position:, id:) = new(position:, edges: [], id:)
  end

  def connect(other, weight)
    raise :boom if id == other.id
    return if connected?(other)

    edges << Edge.new(other, weight)
  end

  def <=>(other) = id <=> other.id
  def eql?(other) = id == other.id
  def connected?(other) = edges.any? { _1.to_node == other }
  def each_connected_node(&) = edges.each { yield(_1.to_node, _1.weight) }
end

Edge = Data.define(:to_node, :weight)

class MazeGraph
  def initialize(map)
    @map = map
    @nodes = {}
    @node_id = 0
    parse
  end

  def nodes_at(position) = nodes.fetch(position)

  private

  attr_reader :map, :nodes
  attr_accessor :node_id

  def parse = flood(find_or_make_nodes(map.reindeer_start))

  def flood(nodes)
    Heading.all.each do |heading|
      flood_direction(
        nodes,
        heading,
        nodes_position(nodes) + heading.direction
      )
    end
  end

  def flood_direction(nodes, heading, position)
    return if map.at(position) == :wall && nodes_position(nodes) + heading.direction == position

    free_neighbours =
      position
      .neighbours
      .select { map.at(_1) == :empty }

    ahead = position + heading.direction
    free_ahead = free_neighbours.include?(ahead)
    if free_neighbours.length > 2 || !free_ahead
      stop_after = has_nodes?(position)
      new_nodes = find_or_make_nodes(position)
      cost = (position - nodes_position(nodes)).length
      nodes.fetch(heading).connect(new_nodes.fetch(heading), cost)
      new_nodes.fetch(heading.opposite).connect(nodes.fetch(heading.opposite), cost)

      flood(new_nodes) unless stop_after
    elsif free_ahead
      flood_direction(nodes, heading, ahead)
    end
  end

  def has_nodes?(position) = nodes.key?(position)
  def nodes_position(nodes) = nodes.values.first.position
  def find_or_make_nodes(position) = nodes[position] ||= make_nodes(position)

  TURN_CYCLE = [Heading.left, Heading.up, Heading.right, Heading.down].freeze
  private_constant :TURN_CYCLE

  def make_nodes(position)
    nodes = TURN_CYCLE.each_with_object({}) do |heading, memo|
      memo[heading] = Node.make(position:, id: make_node_id(position, heading))
    end
    first, *rest = nodes.values
    [first, *rest, first].each_cons(2) do |before, after|
      after.connect(before, 1_000)
      before.connect(after, 1_000)
    end
    nodes
  end

  def make_node_id(position, heading)
    self.node_id += 1
    "##{node_id} P #{position} #{heading}"
  end
end

class Solution
  def initialize(graph, start_node, target_nodes)
    @graph = graph
    @target_nodes = target_nodes
    @inside_nodes = Set.new
    @fringe = SortedSet.new([FringeEntry.make(node: start_node, cost: 0, path: [PathEntry.new(start_node, 0)])])
  end

  def search
    best = []
    while best.empty?
      pp [fringe.size, fringe.first.cost]
      candidates = pop_candidates(fringe.first.cost)

      candidates.each do |entry|
        entry.node.each_connected_node do |new_node, move_cost|
          next if inside_nodes.include?(new_node)

          new_cost = entry.cost + move_cost
          path = [*entry.path, PathEntry.new(new_node, new_cost)]
          best << path if target_nodes.include?(new_node)
          fringe << FringeEntry.make(node: new_node, cost: new_cost, path:)
        end
      end
      candidates.each { inside_nodes.add(_1.node) }
    end
    best
  end

  private

  attr_reader :graph, :target_nodes, :inside_nodes, :fringe

  PathEntry = Data.define(:node, :cost) do
    def to_s = "#{node.id} C #{cost}"
  end

  FringeEntry = Data.define(:node, :cost, :path, :path_hash) do
    class << self
      def make(node:, cost:, path:) = new(node:, cost:, path:, path_hash: path.map { _1.node.id }.hash)
    end

    def <=>(other) = comparable <=> other.comparable
    def comparable = [cost, path_hash]
  end

  def drop_position_from_fringe(position) = fringe.delete_if { _1.node.position == position }

  def pop_candidates(cost)
    result = []
    loop do
      candidate = fringe.first
      return result if candidate.nil? || candidate.cost != cost

      result << candidate
      fringe.delete(candidate)
    end
  end
end

def fill_gaps(from, to)
  direction = Heading.from_points(from, to).direction
  result = []
  pointer = from
  while pointer != to
    result << pointer
    pointer += direction
  end
  [*result, to]
end

def path_positions(path, map)
  path
    .map(&:node)
    .map(&:position)
    .each_cons(2)
    .flat_map { |from, to| fill_gaps(from, to) }
  # .tap { print_path(map, _1, {}) }
end

def print_path(map, positions, markers)
  markers.each do |position, char|
    puts "#{position} => #{char}"
  end

  (0...map.height).each do |y|
    (0...map.width).each do |x|
      position = Vector.new(x, y)
      print case map.at(position)
            when :empty
              if markers.key?(position)
                markers[position]
              elsif positions.include?(position)
                'O'
              else
                '.'
              end

            when :wall
              '#'
            end
    end
    print "\n"
  end
end

map = MazeMap.new(ARGF.readlines(chomp: true).map(&:chars))
graph = MazeGraph.new(map)

paths = Solution.new(
  graph,
  graph.nodes_at(map.reindeer_start).fetch(Heading.right),
  graph.nodes_at(map.reindeer_target).values
).search

pp paths.flat_map { path_positions(_1, map) }.uniq.count
