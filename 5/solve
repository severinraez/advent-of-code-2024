#!/usr/bin/env ruby

def valid?(pages_after, must_come_before, pages_before = [])
  return true if pages_after.empty?

  current, *after = pages_after
  return false if rule_broken?(current, must_come_before, pages_before)

  valid?(after, must_come_before, [*pages_before, current])
end

def rule_broken?(page, must_come_before, pages_before)
  unusable = must_come_before[page] || []
  pages_before.intersect?(unusable)
end

def middle(array) = array[(array.length-1)/2]

lines = ARGF.readlines(chomp: true)
rules, (_spacer, *updates) = lines.partition { _1.include?("|") }

must_come_before = rules
  .map { _1.split('|') }
  .group_by { |before, _after| before }
  .transform_values { _1.map { |_before, after| after } }

puts updates
  .map { _1.split(',') }
  .select { valid?(_1, must_come_before) }
  .map { middle(_1).to_i }
  .sum
