#!/usr/bin/env ruby

Vector = Data.define(:x, :y) do
  def +(other) = self.class.new(x: x + other.x, y: y + other.y)
  def neighbours = [with(x: x - 1), with(y: y - 1), with(x: x + 1), with(y: y + 1)]
end

class ElevationMap
  def initialize(lines)
    @lines = lines
    @height = lines.length
    @width = lines.first.length
  end

  def height_at(vector)
    return nil unless inside?(vector)

    lines[vector.y][vector.x]
  end

  def starts
    lines.each_with_index.flat_map do |x_positions, y|
      x_positions.each_with_index.filter_map do |height, x|
        height.zero? ? Vector.new(x:, y:) : nil
      end
    end
  end

  private

  def inside?(vector) = vector.x >= 0 && vector.x < width && vector.y >= 0 && vector.y < height

  attr_reader :lines, :height, :width
end

def destinations(positions, map, height = 0)
  return positions if height == 9

  next_height = height + 1
  next_positions = positions.flat_map do |position|
    position
      .neighbours
      .select { map.height_at(_1) == next_height }
  end

  destinations(next_positions, map, next_height)
end

lines = ARGF.readlines(chomp: true).map { _1.chars.map(&:to_i) }
map = ElevationMap.new(lines)
pp map.starts.map { destinations([_1], map).length }.sum
