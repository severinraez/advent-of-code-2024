#!/usr/bin/env ruby

require 'forwardable'

Vector = Data.define(:x, :y) do
  def +(other) = self.class.new(x: x + other.x, y: y + other.y)
end

GuardState = Data.define(:position, :heading)
module Headings
  LEFT = Vector.new(x: -1, y: 0)
  RIGHT = Vector.new(x: 1, y: 0)
  UP =  Vector.new(x: 0, y: -1)
  DOWN = Vector.new(x: 0, y: 1)
end

class LabMap
  def initialize(positions)
    @guard_start, @positions = parse(positions)
    @height = positions.length
    @width = positions.first.length
  end

  def at(position) = positions[position.y][position.x]
  def inside?(position) = position.x >= 0 && position.x < width && position.y >= 0 && position.y < height

  attr_reader :guard_start

  private

  attr_reader :width, :height, :positions

  def parse(positions)
    guard_state = nil
    positions = positions.each_with_index.map do |x_positions, y|
      x_positions.each_with_index.map do |character, x|
        next :empty if character == '.'
        next :blocked if character == '#'

        guard_state = GuardState.new(
          position: Vector.new(x, y),
          heading: heading(character)
        )
        :empty
      end
    end

    [guard_state, positions]
  end

  def heading(character)
    case character
    when '<' then Headings::LEFT
    when '>' then Headings::RIGHT
    when '^' then Headings::UP
    when 'V' then Headings::DOWN
    else
      raise "What is #{character.inspect}?"
    end
  end
end

class WithObstacle
  extend Forwardable

  def_delegators :@map, :inside?, :guard_start

  def initialize(map, obstacle_position)
    @map = map
    @obstacle_position = obstacle_position
  end

  def at(position)
    return :blocked if @obstacle_position == position

    @map.at(position)
  end
end

class Guard
  def initialize(state, map)
    @map = map
    @past_states = Set.new
    @past_positions = Set.new
    change_state(state)
    @looping = false
  end

  def dup_with(map)
    result = self.class.new(state, map)
    result.init_dup(past_states.dup, past_positions.dup, looping)
    result
  end

  def step
    return :vanished unless map.inside?(ahead)

    map.at(ahead) == :empty ? move_forward : turn
    looping ? :looping : :moving
  end

  def has_been_at?(position) = past_positions.include?(position)
  def ahead = state.position + state.heading

  protected

  def init_dup(past_states, past_positions, looping)
    self.past_states = past_states
    self.past_positions = past_positions
    self.looping = looping
  end

  private

  attr_reader :map
  attr_accessor :state, :looping, :past_states, :past_positions

  TURN_CYCLE = [Headings::LEFT, Headings::UP, Headings::RIGHT, Headings::DOWN].freeze
  private_constant :TURN_CYCLE

  def move_forward = change_state(state.with(position: ahead))

  def turn
    next_index = (TURN_CYCLE.index(state.heading) + 1) % TURN_CYCLE.length
    change_state(state.with(heading: TURN_CYCLE[next_index]))
  end

  def change_state(new_state)
    self.state = new_state
    self.looping = past_states.include?(state)
    past_states << new_state
    past_positions << new_state.position
  end
end

def count_looping_obstacles(map, guard)
  case guard.step
  when :looping
    obstacle_placed?(map) ? 1 : 0
  when :vanished
    0
  when :moving
    result = 0
    position = guard.ahead
    if !guard.has_been_at?(position) && can_place_obstacle?(map, position)
      map_with_obstacle = WithObstacle.new(map, position)
      result += count_looping_obstacles(map_with_obstacle, guard.dup_with(map_with_obstacle))
    end
    result += count_looping_obstacles(map, guard)
    result
  end
end

def obstacle_placed?(map) = map.is_a?(WithObstacle)
def can_place_obstacle?(map, position) = !obstacle_placed?(map) && map.inside?(position) && map.at(position) == :empty

positions = ARGF.readlines(chomp: true).map(&:chars)
map = LabMap.new(positions)

puts count_looping_obstacles(map, Guard.new(map.guard_start, map))
