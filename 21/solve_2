#!/usr/bin/env ruby

require_relative '../lib'

Button = Data.define(:label, :position)

class Keypad
  def initialize(button_labels)
    @buttons = button_labels.each_with_index.flat_map do |y_labels, y|
      y_labels.each_with_index.filter_map do |label, x|
        next if label.nil?

        Button.new(label:, position: Vector.new(x, y))
      end
    end
  end

  def remote_keys(label_from, label_to)
    return [[]] if label_from == label_to

    from = button_position(label_from)
    to = button_position(label_to)
    distance = to - from
    return [keys(distance)] if distance.x.zero? || distance.y.zero?

    x_distance = Vector.new(distance.x, 0)
    y_distance = Vector.new(0, distance.y)

    results = []
    results << (keys(x_distance) + keys(y_distance)) if valid_path?(from, from + x_distance, to)
    results << (keys(y_distance) + keys(x_distance)) if valid_path?(from, from + y_distance, to)
    raise 'should not happen' if results.empty?

    results
  end

  def distance(label_from, label_to)
    from = button_position(label_from)
    to = button_position(label_to)

    distance = to - from
    distance.x + distance.y
  end

  def inspect = "Keypad(#{buttons_by_label.keys.join(', ')})"

  private

  attr_reader :buttons

  def button_position(label) = buttons_by_label.fetch(label).position

  def keys(distance)
    x_char = distance.x.negative? ? '<' : '>'
    y_char = distance.y.negative? ? '^' : 'v'
    ([x_char] * distance.x.abs) + ([y_char] * distance.y.abs)
  end

  def valid_path?(from, via, to)
    positions =
      Path.new([from, via]).fill_gaps.positions[1..] +
      Path.new([via, to]).fill_gaps.positions[1..]
    positions.all? { button_at?(_1) }
  end

  def index_by(array, &) = array.each_with_object({}) { |e, memo| memo[yield(e)] = e }
  def buttons_by_label = @buttons_by_label ||= index_by(buttons, &:label)
  def buttons_by_position = @buttons_by_position ||= index_by(buttons, &:position)
  def button_at?(position) = buttons_by_position.key?(position)
end

class KeySequence
  def initialize(keypad)
    @last_button = 'A'
    @keypad = keypad
  end

  def remote_keys(button)
    options = keypad.remote_keys(last_button, button)
    self.last_button = button
    options.map { [*_1, 'A'] }
  end

  def distance_to_last_button(button) = keypad.distance(last_button, button)
  def state = [keypad.object_id, last_button]

  def dup
    result = self.class.new(keypad)
    result.last_button = last_button
    result
  end

  protected

  attr_writer :last_button

  private

  attr_reader :keypad, :last_button
end

class RequiredPresses
  def initialize
    @cache = {}
  end

  def press_count(door_buttons)
    door_remote, *robot_remotes = make_remotes
    remote_buttons = door_buttons.flat_map { press_one(door_remote, robot_remotes.first, _1) }
    result = Result.empty(key_sequences: robot_remotes)
    remote_buttons.each_with_index do |button, i|
      # puts "#{i}/#{remote_buttons.length}"
      result = result.combine_next(press_cascade_memoized(result.key_sequences, button))
      pp(count: result.count, button_count: result.buttons.count)
    end
    result.buttons.count
  end

  private

  attr_reader :last_char, :cache

  DOOR_KEYPAD = Keypad.new([%w[7 8 9], %w[4 5 6], %w[1 2 3], [nil, '0', 'A']])
  REMOTE_KEYPAD = Keypad.new([[nil, '^', 'A'], %w[< v >]])
  CACHE_LENGTH = 3
  INTERMEDIATE_REMOTE_COUNT = 5

  Result = Data.define(:key_sequences, :buttons, :count) do
    class << self
      def make(key_sequences:, buttons:, count: 0) = new(key_sequences:, buttons:, count:)
      def empty(key_sequences:) = make(key_sequences:, buttons: [])
    end

    def dup = with(key_sequences: key_sequences.map(&:dup))

    def combine_next(next_result)
      next_result
        .with(count: next_result.count + count, buttons: buttons + next_result.buttons)
    end

    def combine_downstream(result)
      result.with(key_sequences: key_sequences + result.key_sequences)
    end
  end

  ButtonCount = Data.define(:value)

  private_constant :DOOR_KEYPAD, :REMOTE_KEYPAD, :CACHE_LENGTH, :INTERMEDIATE_REMOTE_COUNT

  def make_remotes
    my_remote = KeySequence.new(REMOTE_KEYPAD)
    intermediate_remotes = INTERMEDIATE_REMOTE_COUNT.times.map { KeySequence.new(REMOTE_KEYPAD) }
    door_remote = KeySequence.new(DOOR_KEYPAD)
    [door_remote, *intermediate_remotes, my_remote]
  end

  def press_cascade_memoized(key_sequences, button, last_downstream: nil)
    return press_cascade_split(key_sequences, button) if key_sequences.length > CACHE_LENGTH

    key = [key_sequences.map(&:state), last_downstream&.state, button]
    cached = cache[key]&.dup
    return cached unless cached.nil?

    result = press_cascade(key_sequences, button, last_downstream:)
    with_count = result.with(count: result.buttons.count)
    @cache[key] = with_count.dup
    with_count.dup
  end

  def press_cascade_split(key_sequences, button)
    cached = key_sequences[...CACHE_LENGTH]
    left = key_sequences[CACHE_LENGTH...]

    result = press_cascade_memoized(cached, button, last_downstream: left.first)

    left_result = Result.empty(key_sequences: left)
    result.buttons.each do |downstream_button|
      left_result = left_result.combine_next(press_cascade_memoized(left_result.key_sequences, downstream_button))
    end

    result.combine_downstream(left_result)
  end

  def fetch_cache(key) = cache[key]

  def press_cascade(key_sequences, button, last_downstream: nil)
    first, downstream, *rest = key_sequences
    buttons = press_one(first, downstream || last_downstream, button)

    return Result.make(key_sequences:, buttons:) if key_sequences.length == 1

    downstream_result = Result.empty(key_sequences: [downstream, *rest])
    buttons.each do |remote_button|
      downstream_result = downstream_result.combine_next(
        press_cascade_memoized(downstream_result.key_sequences, remote_button, last_downstream:)
      )
    end
    Result.make(key_sequences: [first, *downstream_result.key_sequences], buttons: downstream_result.buttons)
  end

  def press_one(sequence, downstream, button)
    options = sequence.remote_keys(button)
    return options.first if downstream.nil?

    options.min_by { |option_buttons| downstream.distance_to_last_button(option_buttons.first) }
  end
end

def code_presses(code)
  RequiredPresses.new.press_count(code.chars)
end

def numeric_part(code) = code.scan(/[0-9]/).join.to_i
def complexity(code) = numeric_part(code) * code_presses(code)

codes = ARGF.readlines(chomp: true)
# pp codes.map { [_1, code_presses(_1), numeric_part(_1)] }
pp codes.sum {
  pp(code: _1)
  complexity(_1)
}
