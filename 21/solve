#!/usr/bin/env ruby

require_relative '../lib'

Button = Data.define(:label, :position)

class Keypad
  def initialize(button_labels)
    @buttons = button_labels.each_with_index.flat_map do |y_labels, y|
      y_labels.each_with_index.filter_map do |label, x|
        next if label.nil?

        Button.new(label:, position: Vector.new(x, y))
      end
    end
  end

  def remote_keys(label_from, label_to)
    return [] if label_from == label_to

    from = button_position(label_from)
    to = button_position(label_to)
    distance = to - from
    return [keys(distance)] if distance.x.zero? || distance.y.zero?

    x_distance = Vector.new(distance.x, 0)
    y_distance = Vector.new(0, distance.y)

    results = []
    results << (keys(x_distance) + keys(y_distance)) if valid_path?(from, from + x_distance, to)
    results << (keys(y_distance) + keys(x_distance)) if valid_path?(from, from + y_distance, to)
    raise 'should not happen' if results.empty?

    results
  end

  def distance(label_from, label_to)
    from = button_position(label_from)
    to = button_position(label_to)

    distance = to - from
    distance.x + distance.y
  end

  private

  attr_reader :buttons

  def button_position(label) = buttons_by_label.fetch(label).position

  def keys(distance)
    x_char = distance.x.negative? ? '<' : '>'
    y_char = distance.y.negative? ? '^' : 'v'
    ([x_char] * distance.x.abs) + ([y_char] * distance.y.abs)
  end

  def valid_path?(from, via, to)
    positions =
      Path.new([from, via]).fill_gaps.positions[1..] +
      Path.new([via, to]).fill_gaps.positions[1..]
    positions.all? { button_at?(_1) }
  end

  def index_by(array, &) = array.each_with_object({}) { |e, memo| memo[yield(e)] = e }
  def buttons_by_label = @buttons_by_label ||= index_by(buttons, &:label)
  def buttons_by_position = @buttons_by_position ||= index_by(buttons, &:position)
  def button_at?(position) = buttons_by_position.key?(position)
end

class KeySequence
  # @param [KeySequence] remote
  def initialize(keypad, remote)
    @last_button = 'A'
    @remote = remote
    @keypad = keypad
  end

  def remote_keys(button)
    options = keypad.remote_keys(last_button, button)
    result = options.min_by { first_key_distance(_1) }
    self.last_button = button
    [*result, 'A']
  end

  def distance(button) = keypad.distance(last_button, button)

  private

  def first_key_distance(buttons)
    return 0 if remote.nil?

    first, *_rest = buttons
    remote.distance(first).to_i
  end

  attr_reader :keypad, :remote
  attr_accessor :last_button
end

class RequiredPresses
  def initialize
    @my_remote = KeySequence.new(REMOTE_KEYPAD, nil)
    @temperature_remote = KeySequence.new(REMOTE_KEYPAD, my_remote)
    @radiation_remote = KeySequence.new(DOOR_KEYPAD, temperature_remote)
  end

  def press_count(door_buttons)
    door_buttons.sum { press_count_button(_1) }
  end

  private

  attr_reader :last_char, :my_remote, :temperature_remote, :radiation_remote

  DOOR_KEYPAD = Keypad.new([%w[7 8 9], %w[4 5 6], %w[1 2 3], [nil, '0', 'A']])
  REMOTE_KEYPAD = Keypad.new([[nil, '^', 'A'], %w[< v >]])

  private_constant :DOOR_KEYPAD, :REMOTE_KEYPAD

  def press_count_button(button)
    pp door_button: button
    radiation_remote
      .remote_keys(button)
      .tap { pp radiation_remote: _1 }
      .flat_map do |radiation_remote_button|
        temperature_remote
          .remote_keys(radiation_remote_button)
          .tap { pp temperature_remote: _1 }
          .flat_map { my_remote.remote_keys(_1) }
          .tap { pp my_remote: _1 }
      end
      .count
  end
end

def code_presses(code)
  RequiredPresses.new.press_count(code.chars)
end

def numeric_part(code) = code.scan(/[0-9]/).join.to_i
def complexity(code) = numeric_part(code) * code_presses(code)

codes = ARGF.readlines(chomp: true)
# pp codes.map { [_1, code_presses(_1), numeric_part(_1)] }
pp codes.sum { complexity(_1) }
