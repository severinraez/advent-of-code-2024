#!/usr/bin/env ruby

Vector = Data.define(:x, :y) do
  def +(other) = self.class.new(x: x + other.x, y: y + other.y)
  def neighbours = [with(x: x - 1), with(y: y - 1), with(x: x + 1), with(y: y + 1)]
end

class WarehouseMap
  def initialize(lines)
    @positions = parse(lines)
    @height = positions.length
    @width = positions.first.length
  end

  def at(vector)
    return Outside.new unless inside?(vector)

    positions[vector.y][vector.x]
  end

  def move(from, to)
    positions[to.y][to.x] = positions[from.y][from.x]
    positions[from.y][from.x] = contents(Empty, from)
  end

  def box_positions
    positions.each_with_index.flat_map do |x_positions, y|
      x_positions.each_with_index.filter_map do |contents, x|
        contents.is_a?(Box) ? contents.first_position : nil
      end.uniq
    end
  end

  attr_reader :robot_start

  private

  attr_reader :positions, :height, :width

  def parse(lines)
    current_box = nil
    lines.each_with_index.map do |line, y|
      line.each_with_index.map do |char, x|
        position = Vector.new(x, y)
        case char
        when '.'
          contents(Empty, position)
        when '#'
          contents(Wall, position)
        when '['
          current_box = contents(Box, position)
        when ']'
          current_box
        when '@'
          @robot_start = position
          contents(Empty, position)
        end
      end
    end
  end

  def contents(klass, position) = klass.new(position, self)
  def inside?(vector) = vector.x >= 0 && vector.x < width && vector.y >= 0 && vector.y < height
end

class Outside
  def move?(_direction) = false
  def move(_direction) = false
end

class Content
  def initialize(position, map)
    @position = position
    @map = map
  end

  private

  attr_reader :map
  attr_accessor :position
end

class Empty < Content
  def move?(_direction) = true
  def move(_direction) = true
end

class Wall < Content
  def move?(_direction) = false
  def move(_direction) = false
end

class Box < Content
  def move?(direction)
    parts =
      if direction.x.negative?
        [position]
      elsif direction.x.positive?
        [second_position]
      else
        [position, second_position]
      end
    parts.all? { map.at(_1 + direction).move?(direction) }
  end

  def move(direction)
    return false unless move?(direction)

    parts = direction.x.negative? ? [position, second_position] : [second_position, position]
    parts.each do |part|
      map.at(part + direction).move(direction)
      map.move(part, part + direction)
    end

    self.position += direction
    true
  end

  def first_position = position

  private

  def second_position = position + Vector.new(1, 0)
end

class Robot < Content
  def move(direction)
    return unless map.at(position + direction).move(direction)

    self.position += direction
  end
end

MOVES = {
  '<' => Vector.new(x: -1, y: 0),
  '>' => Vector.new(x: 1, y: 0),
  '^' => Vector.new(x: 0, y: -1),
  'v' => Vector.new(x: 0, y: 1)
}.freeze

WIDENED_CONTENTS = {
  '#' => '##',
  'O' => '[]',
  '.' => '..',
  '@' => '@.'
}.freeze

map_lines, (_spacer, *move_lines) =
  ARGF
  .readlines(chomp: true)
  .partition { _1.start_with?('#') }

map = WarehouseMap.new(
  map_lines
  .map(&:chars)
  .map { |chars| chars.flat_map { WIDENED_CONTENTS.fetch(_1).chars } }
)
robot = Robot.new(map.robot_start, map)
move_lines.join.chars.map { MOVES.fetch(_1) }.each { robot.move(_1) }

puts map
  .box_positions
  .map { _1.x + (_1.y * 100) }
  .sum
